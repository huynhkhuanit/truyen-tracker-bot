import asyncio
import sqlite3
import pandas as pd
import sys
import os  # Th√™m import os ƒë·ªÉ ƒë·ªçc bi·∫øn m√¥i tr∆∞·ªùng
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# L·∫•y TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, n·∫øu kh√¥ng c√≥ th√¨ d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh (d√†nh cho test c·ª•c b·ªô)
TOKEN = os.environ.get("TOKEN", "7809066941:AAHXcMWaYTKro2yXKjYvE9aPIn9I_cm8b_Q")

# K·∫øt n·ªëi database SQLite
conn = sqlite3.connect("truyen.db", check_same_thread=False)
cursor = conn.cursor()

# T·∫°o b·∫£ng d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
cursor.execute("""
CREATE TABLE IF NOT EXISTS truyen (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ten_truyen TEXT UNIQUE,
    so_chuong INTEGER DEFAULT 0,
    ngay_doc TEXT
)
""")
conn.commit()

# H√†m start bot
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("Xin ch√†o! H√£y nh·∫≠p t√™n truy·ªán v√† s·ªë ch∆∞∆°ng ƒë√£ ƒë·ªçc theo format:\n\n/t t√™n_truy·ªán s·ªë_ch∆∞∆°ng")

# H√†m th√™m ho·∫∑c c·∫≠p nh·∫≠t truy·ªán v√† t·ª± ƒë·ªông xu·∫•t Excel
async def them_truyen(update: Update, context: CallbackContext) -> None:
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("Sai c√∫ ph√°p! H√£y nh·∫≠p: /t t√™n_truy·ªán s·ªë_ch∆∞∆°ng")
            return

        ten_truyen = " ".join(args[:-1])
        so_chuong = int(args[-1])

        cursor.execute("SELECT so_chuong FROM truyen WHERE ten_truyen=?", (ten_truyen,))
        row = cursor.fetchone()

        if row:
            so_chuong_moi = max(so_chuong, row[0])  # L·∫•y s·ªë ch∆∞∆°ng l·ªõn nh·∫•t ƒë√£ ƒë·ªçc
            cursor.execute("UPDATE truyen SET so_chuong=?, ngay_doc=date('now') WHERE ten_truyen=?", (so_chuong_moi, ten_truyen))
            await update.message.reply_text(f"üìñ C·∫≠p nh·∫≠t: {ten_truyen} - {so_chuong_moi} ch∆∞∆°ng")
        else:
            cursor.execute("INSERT INTO truyen (ten_truyen, so_chuong, ngay_doc) VALUES (?, ?, date('now'))", (ten_truyen, so_chuong))
            await update.message.reply_text(f"‚úÖ ƒê√£ th√™m truy·ªán: {ten_truyen} - {so_chuong} ch∆∞∆°ng")

        conn.commit()

        # T·ª± ƒë·ªông xu·∫•t d·ªØ li·ªáu ra file Excel
        cursor.execute("SELECT * FROM truyen")
        rows = cursor.fetchall()
        
        if rows:
            df = pd.DataFrame(rows, columns=["ID", "T√™n Truy·ªán", "S·ªë Ch∆∞∆°ng", "Ng√†y ƒê·ªçc"])
            df.to_excel("TruyenDaDoc.xlsx", index=False)
            await update.message.reply_text("üìã D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông c·∫≠p nh·∫≠t v√†o file Excel 'TruyenDaDoc.xlsx'.")

    except ValueError:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ch∆∞∆°ng h·ª£p l·ªá!")

# H√†m li·ªát k√™ c√°c truy·ªán ƒë√£ ƒë·ªçc
async def danh_sach_truyen(update: Update, context: CallbackContext) -> None:
    cursor.execute("SELECT ten_truyen, so_chuong, ngay_doc FROM truyen")
    data = cursor.fetchall()
    
    if not data:
        await update.message.reply_text("B·∫°n ch∆∞a ƒë·ªçc truy·ªán n√†o!")
        return

    reply_text = "\n".join([f"{row[0]} - {row[1]} ch∆∞∆°ng (C·∫≠p nh·∫≠t: {row[2]})" for row in data])
    await update.message.reply_text(reply_text)

# H√†m xu·∫•t danh s√°ch ra Excel (gi·ªØ l·∫°i cho tr∆∞·ªùng h·ª£p c·∫ßn xu·∫•t th·ªß c√¥ng)
async def xuat_excel(update: Update, context: CallbackContext) -> None:
    cursor.execute("SELECT * FROM truyen")
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!")
        return

    df = pd.DataFrame(rows, columns=["ID", "T√™n Truy·ªán", "S·ªë Ch∆∞∆°ng", "Ng√†y ƒê·ªçc"])
    df.to_excel("TruyenDaDoc.xlsx", index=False)

    await update.message.reply_document(document=open("TruyenDaDoc.xlsx", "rb"))
    await update.message.reply_text("üìÑ File Excel 'TruyenDaDoc.xlsx' ƒë√£ ƒë∆∞·ª£c xu·∫•t v√† g·ª≠i cho b·∫°n.")

# H√†m ch·∫°y bot
async def main():
    # T·∫°o ·ª©ng d·ª•ng
    app = Application.builder().token(TOKEN).build()

    # Th√™m c√°c handler
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("t", them_truyen))  # Ghi truy·ªán
    app.add_handler(CommandHandler("list", danh_sach_truyen))  # Danh s√°ch truy·ªán
    app.add_handler(CommandHandler("export", xuat_excel))  # Xu·∫•t file Excel

    print("Bot ƒëang ch·∫°y...")
    
    # Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    await app.initialize()
    # B·∫Øt ƒë·∫ßu polling
    await app.start()
    await app.updater.start_polling()  # Ch·∫°y bot v·ªõi polling
    
    # Gi·ªØ bot ch·∫°y cho ƒë·∫øn khi b·ªã d·ª´ng th·ªß c√¥ng (Ctrl+C)
    try:
        await asyncio.Event().wait()  # Ch·ªù v√¥ th·ªùi h·∫°n
    except KeyboardInterrupt:
        print("Bot ƒëang d·ª´ng...")
    
    # D·ª´ng bot m·ªôt c√°ch s·∫°ch s·∫Ω
    await app.updater.stop()
    await app.stop()
    await app.shutdown()

if __name__ == "__main__":
    # C·∫•u h√¨nh ch√≠nh s√°ch v√≤ng l·∫∑p cho Windows n·∫øu c·∫ßn
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    # Ch·∫°y ·ª©ng d·ª•ng
    asyncio.run(main())